// Code generated by goa v3.4.3, DO NOT EDIT.
//
// v1/wallet endpoints
//
// Command:
// $ goa gen github.com/jainpiyush19/cryptowallet/design

package v1wallet

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "v1/wallet" service endpoints.
type Endpoints struct {
	Health       goa.Endpoint
	Deposit      goa.Endpoint
	Withdraw     goa.Endpoint
	Transfer     goa.Endpoint
	Balance      goa.Endpoint
	AdminWallets goa.Endpoint
}

// NewEndpoints wraps the methods of the "v1/wallet" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Health:       NewHealthEndpoint(s),
		Deposit:      NewDepositEndpoint(s, a.JWTAuth),
		Withdraw:     NewWithdrawEndpoint(s, a.JWTAuth),
		Transfer:     NewTransferEndpoint(s, a.JWTAuth),
		Balance:      NewBalanceEndpoint(s, a.JWTAuth),
		AdminWallets: NewAdminWalletsEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "v1/wallet" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Health = m(e.Health)
	e.Deposit = m(e.Deposit)
	e.Withdraw = m(e.Withdraw)
	e.Transfer = m(e.Transfer)
	e.Balance = m(e.Balance)
	e.AdminWallets = m(e.AdminWallets)
}

// NewHealthEndpoint returns an endpoint function that calls the method
// "health" of service "v1/wallet".
func NewHealthEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return nil, s.Health(ctx)
	}
}

// NewDepositEndpoint returns an endpoint function that calls the method
// "deposit" of service "v1/wallet".
func NewDepositEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DepositRequestBody)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.Deposit(ctx, p)
	}
}

// NewWithdrawEndpoint returns an endpoint function that calls the method
// "withdraw" of service "v1/wallet".
func NewWithdrawEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*WithdrawRequestBody)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.Withdraw(ctx, p)
	}
}

// NewTransferEndpoint returns an endpoint function that calls the method
// "transfer" of service "v1/wallet".
func NewTransferEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*TransferRequestBody)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.Transfer(ctx, p)
	}
}

// NewBalanceEndpoint returns an endpoint function that calls the method
// "balance" of service "v1/wallet".
func NewBalanceEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*BalanceRequestBody)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.Balance(ctx, p)
	}
}

// NewAdminWalletsEndpoint returns an endpoint function that calls the method
// "admin/wallets" of service "v1/wallet".
func NewAdminWalletsEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AdminWalletRequestBody)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.AdminWallets(ctx, p)
	}
}
