// Code generated by goa v3.4.3, DO NOT EDIT.
//
// v1/wallet HTTP server types
//
// Command:
// $ goa gen github.com/jainpiyush19/cryptowallet/design

package server

import (
	v1wallet "github.com/jainpiyush19/cryptowallet/gen/v1_wallet"
	goa "goa.design/goa/v3/pkg"
)

// DepositRequestBody is the type of the "v1/wallet" service "deposit" endpoint
// HTTP request body.
type DepositRequestBody struct {
	Amount *float64 `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
}

// WithdrawRequestBody is the type of the "v1/wallet" service "withdraw"
// endpoint HTTP request body.
type WithdrawRequestBody struct {
	Amount *float64 `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
}

// TransferRequestBody is the type of the "v1/wallet" service "transfer"
// endpoint HTTP request body.
type TransferRequestBody struct {
	ReceiverID *int64   `form:"receiverID,omitempty" json:"receiverID,omitempty" xml:"receiverID,omitempty"`
	Amount     *float64 `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
}

// BalanceResponseBody is the type of the "v1/wallet" service "balance"
// endpoint HTTP response body.
type BalanceResponseBody struct {
	Amount    float64 `form:"Amount" json:"Amount" xml:"Amount"`
	UpdatedAt string  `form:"UpdatedAt" json:"UpdatedAt" xml:"UpdatedAt"`
}

// AdminWalletsResponseBody is the type of the "v1/wallet" service
// "admin/wallets" endpoint HTTP response body.
type AdminWalletsResponseBody struct {
	Data []*WalletResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// WalletResponseBody is used to define fields on response body types.
type WalletResponseBody struct {
	UserID    *int64   `form:"userID,omitempty" json:"userID,omitempty" xml:"userID,omitempty"`
	Amount    *float64 `form:"Amount,omitempty" json:"Amount,omitempty" xml:"Amount,omitempty"`
	UpdatedAt *string  `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty" xml:"UpdatedAt,omitempty"`
}

// NewBalanceResponseBody builds the HTTP response body from the result of the
// "balance" endpoint of the "v1/wallet" service.
func NewBalanceResponseBody(res *v1wallet.BalanceResponseBody) *BalanceResponseBody {
	body := &BalanceResponseBody{
		Amount:    res.Amount,
		UpdatedAt: res.UpdatedAt,
	}
	return body
}

// NewAdminWalletsResponseBody builds the HTTP response body from the result of
// the "admin/wallets" endpoint of the "v1/wallet" service.
func NewAdminWalletsResponseBody(res *v1wallet.AdminWalletResponseBody) *AdminWalletsResponseBody {
	body := &AdminWalletsResponseBody{}
	if res.Data != nil {
		body.Data = make([]*WalletResponseBody, len(res.Data))
		for i, val := range res.Data {
			body.Data[i] = marshalV1walletWalletToWalletResponseBody(val)
		}
	}
	return body
}

// NewDepositRequestBody builds a v1/wallet service deposit endpoint payload.
func NewDepositRequestBody(body *DepositRequestBody, token *string) *v1wallet.DepositRequestBody {
	v := &v1wallet.DepositRequestBody{
		Amount: *body.Amount,
	}
	v.Token = token

	return v
}

// NewWithdrawRequestBody builds a v1/wallet service withdraw endpoint payload.
func NewWithdrawRequestBody(body *WithdrawRequestBody, token *string) *v1wallet.WithdrawRequestBody {
	v := &v1wallet.WithdrawRequestBody{
		Amount: *body.Amount,
	}
	v.Token = token

	return v
}

// NewTransferRequestBody builds a v1/wallet service transfer endpoint payload.
func NewTransferRequestBody(body *TransferRequestBody, token *string) *v1wallet.TransferRequestBody {
	v := &v1wallet.TransferRequestBody{
		ReceiverID: *body.ReceiverID,
		Amount:     *body.Amount,
	}
	v.Token = token

	return v
}

// NewBalanceRequestBody builds a v1/wallet service balance endpoint payload.
func NewBalanceRequestBody(userID int64, token *string) *v1wallet.BalanceRequestBody {
	v := &v1wallet.BalanceRequestBody{}
	v.UserID = userID
	v.Token = token

	return v
}

// NewAdminWalletsAdminWalletRequestBody builds a v1/wallet service
// admin/wallets endpoint payload.
func NewAdminWalletsAdminWalletRequestBody(token *string) *v1wallet.AdminWalletRequestBody {
	v := &v1wallet.AdminWalletRequestBody{}
	v.Token = token

	return v
}

// ValidateDepositRequestBody runs the validations defined on DepositRequestBody
func ValidateDepositRequestBody(body *DepositRequestBody) (err error) {
	if body.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("amount", "body"))
	}
	if body.Amount != nil {
		if *body.Amount < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.amount", *body.Amount, 0, true))
		}
	}
	return
}

// ValidateWithdrawRequestBody runs the validations defined on
// WithdrawRequestBody
func ValidateWithdrawRequestBody(body *WithdrawRequestBody) (err error) {
	if body.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("amount", "body"))
	}
	if body.Amount != nil {
		if *body.Amount < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.amount", *body.Amount, 0, true))
		}
	}
	return
}

// ValidateTransferRequestBody runs the validations defined on
// TransferRequestBody
func ValidateTransferRequestBody(body *TransferRequestBody) (err error) {
	if body.ReceiverID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("receiverID", "body"))
	}
	if body.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("amount", "body"))
	}
	if body.ReceiverID != nil {
		if *body.ReceiverID < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.receiverID", *body.ReceiverID, 0, true))
		}
	}
	if body.Amount != nil {
		if *body.Amount < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.amount", *body.Amount, 0, true))
		}
	}
	return
}
