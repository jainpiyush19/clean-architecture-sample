// Code generated by goa v3.4.3, DO NOT EDIT.
//
// v1/wallet HTTP server
//
// Command:
// $ goa gen github.com/jainpiyush19/cryptowallet/design

package server

import (
	"context"
	"net/http"

	v1wallet "github.com/jainpiyush19/cryptowallet/gen/v1_wallet"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the v1/wallet service endpoint HTTP handlers.
type Server struct {
	Mounts       []*MountPoint
	Health       http.Handler
	Deposit      http.Handler
	Withdraw     http.Handler
	Transfer     http.Handler
	Balance      http.Handler
	AdminWallets http.Handler
	CORS         http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the v1/wallet service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *v1wallet.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"Health", "GET", "/health"},
			{"Deposit", "POST", "/deposit"},
			{"Withdraw", "POST", "/withdraw"},
			{"Transfer", "POST", "/transfer"},
			{"Balance", "GET", "/balance"},
			{"AdminWallets", "GET", "/admin/wallets"},
			{"CORS", "OPTIONS", "/health"},
			{"CORS", "OPTIONS", "/deposit"},
			{"CORS", "OPTIONS", "/withdraw"},
			{"CORS", "OPTIONS", "/transfer"},
			{"CORS", "OPTIONS", "/balance"},
			{"CORS", "OPTIONS", "/admin/wallets"},
		},
		Health:       NewHealthHandler(e.Health, mux, decoder, encoder, errhandler, formatter),
		Deposit:      NewDepositHandler(e.Deposit, mux, decoder, encoder, errhandler, formatter),
		Withdraw:     NewWithdrawHandler(e.Withdraw, mux, decoder, encoder, errhandler, formatter),
		Transfer:     NewTransferHandler(e.Transfer, mux, decoder, encoder, errhandler, formatter),
		Balance:      NewBalanceHandler(e.Balance, mux, decoder, encoder, errhandler, formatter),
		AdminWallets: NewAdminWalletsHandler(e.AdminWallets, mux, decoder, encoder, errhandler, formatter),
		CORS:         NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "v1/wallet" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Health = m(s.Health)
	s.Deposit = m(s.Deposit)
	s.Withdraw = m(s.Withdraw)
	s.Transfer = m(s.Transfer)
	s.Balance = m(s.Balance)
	s.AdminWallets = m(s.AdminWallets)
	s.CORS = m(s.CORS)
}

// Mount configures the mux to serve the v1/wallet endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountHealthHandler(mux, h.Health)
	MountDepositHandler(mux, h.Deposit)
	MountWithdrawHandler(mux, h.Withdraw)
	MountTransferHandler(mux, h.Transfer)
	MountBalanceHandler(mux, h.Balance)
	MountAdminWalletsHandler(mux, h.AdminWallets)
	MountCORSHandler(mux, h.CORS)
}

// MountHealthHandler configures the mux to serve the "v1/wallet" service
// "health" endpoint.
func MountHealthHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleV1WalletOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/health", f)
}

// NewHealthHandler creates a HTTP handler which loads the HTTP request and
// calls the "v1/wallet" service "health" endpoint.
func NewHealthHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeHealthResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "health")
		ctx = context.WithValue(ctx, goa.ServiceKey, "v1/wallet")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDepositHandler configures the mux to serve the "v1/wallet" service
// "deposit" endpoint.
func MountDepositHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleV1WalletOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/deposit", f)
}

// NewDepositHandler creates a HTTP handler which loads the HTTP request and
// calls the "v1/wallet" service "deposit" endpoint.
func NewDepositHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDepositRequest(mux, decoder)
		encodeResponse = EncodeDepositResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deposit")
		ctx = context.WithValue(ctx, goa.ServiceKey, "v1/wallet")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountWithdrawHandler configures the mux to serve the "v1/wallet" service
// "withdraw" endpoint.
func MountWithdrawHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleV1WalletOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/withdraw", f)
}

// NewWithdrawHandler creates a HTTP handler which loads the HTTP request and
// calls the "v1/wallet" service "withdraw" endpoint.
func NewWithdrawHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeWithdrawRequest(mux, decoder)
		encodeResponse = EncodeWithdrawResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "withdraw")
		ctx = context.WithValue(ctx, goa.ServiceKey, "v1/wallet")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountTransferHandler configures the mux to serve the "v1/wallet" service
// "transfer" endpoint.
func MountTransferHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleV1WalletOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/transfer", f)
}

// NewTransferHandler creates a HTTP handler which loads the HTTP request and
// calls the "v1/wallet" service "transfer" endpoint.
func NewTransferHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeTransferRequest(mux, decoder)
		encodeResponse = EncodeTransferResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "transfer")
		ctx = context.WithValue(ctx, goa.ServiceKey, "v1/wallet")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountBalanceHandler configures the mux to serve the "v1/wallet" service
// "balance" endpoint.
func MountBalanceHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleV1WalletOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/balance", f)
}

// NewBalanceHandler creates a HTTP handler which loads the HTTP request and
// calls the "v1/wallet" service "balance" endpoint.
func NewBalanceHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeBalanceRequest(mux, decoder)
		encodeResponse = EncodeBalanceResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "balance")
		ctx = context.WithValue(ctx, goa.ServiceKey, "v1/wallet")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountAdminWalletsHandler configures the mux to serve the "v1/wallet" service
// "admin/wallets" endpoint.
func MountAdminWalletsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleV1WalletOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/admin/wallets", f)
}

// NewAdminWalletsHandler creates a HTTP handler which loads the HTTP request
// and calls the "v1/wallet" service "admin/wallets" endpoint.
func NewAdminWalletsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeAdminWalletsRequest(mux, decoder)
		encodeResponse = EncodeAdminWalletsResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "admin/wallets")
		ctx = context.WithValue(ctx, goa.ServiceKey, "v1/wallet")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service v1/wallet.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleV1WalletOrigin(h)
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("OPTIONS", "/health", f)
	mux.Handle("OPTIONS", "/deposit", f)
	mux.Handle("OPTIONS", "/withdraw", f)
	mux.Handle("OPTIONS", "/transfer", f)
	mux.Handle("OPTIONS", "/balance", f)
	mux.Handle("OPTIONS", "/admin/wallets", f)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// HandleV1WalletOrigin applies the CORS response headers corresponding to the
// origin for the service v1/wallet.
func HandleV1WalletOrigin(h http.Handler) http.Handler {
	origHndlr := h.(http.HandlerFunc)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			origHndlr(w, r)
			return
		}
		if cors.MatchOrigin(origin, "*") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
			}
			origHndlr(w, r)
			return
		}
		origHndlr(w, r)
		return
	})
}
