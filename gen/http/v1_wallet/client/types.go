// Code generated by goa v3.4.3, DO NOT EDIT.
//
// v1/wallet HTTP client types
//
// Command:
// $ goa gen github.com/jainpiyush19/cryptowallet/design

package client

import (
	v1wallet "github.com/jainpiyush19/cryptowallet/gen/v1_wallet"
	goa "goa.design/goa/v3/pkg"
)

// DepositRequestBody is the type of the "v1/wallet" service "deposit" endpoint
// HTTP request body.
type DepositRequestBody struct {
	Amount float64 `form:"amount" json:"amount" xml:"amount"`
}

// WithdrawRequestBody is the type of the "v1/wallet" service "withdraw"
// endpoint HTTP request body.
type WithdrawRequestBody struct {
	Amount float64 `form:"amount" json:"amount" xml:"amount"`
}

// TransferRequestBody is the type of the "v1/wallet" service "transfer"
// endpoint HTTP request body.
type TransferRequestBody struct {
	ReceiverID int64   `form:"receiverID" json:"receiverID" xml:"receiverID"`
	Amount     float64 `form:"amount" json:"amount" xml:"amount"`
}

// BalanceResponseBody is the type of the "v1/wallet" service "balance"
// endpoint HTTP response body.
type BalanceResponseBody struct {
	Amount    *float64 `form:"Amount,omitempty" json:"Amount,omitempty" xml:"Amount,omitempty"`
	UpdatedAt *string  `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty" xml:"UpdatedAt,omitempty"`
}

// AdminWalletsResponseBody is the type of the "v1/wallet" service
// "admin/wallets" endpoint HTTP response body.
type AdminWalletsResponseBody struct {
	Data []*WalletResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// WalletResponseBody is used to define fields on response body types.
type WalletResponseBody struct {
	UserID    *int64   `form:"userID,omitempty" json:"userID,omitempty" xml:"userID,omitempty"`
	Amount    *float64 `form:"Amount,omitempty" json:"Amount,omitempty" xml:"Amount,omitempty"`
	UpdatedAt *string  `form:"UpdatedAt,omitempty" json:"UpdatedAt,omitempty" xml:"UpdatedAt,omitempty"`
}

// NewDepositRequestBody builds the HTTP request body from the payload of the
// "deposit" endpoint of the "v1/wallet" service.
func NewDepositRequestBody(p *v1wallet.DepositRequestBody) *DepositRequestBody {
	body := &DepositRequestBody{
		Amount: p.Amount,
	}
	return body
}

// NewWithdrawRequestBody builds the HTTP request body from the payload of the
// "withdraw" endpoint of the "v1/wallet" service.
func NewWithdrawRequestBody(p *v1wallet.WithdrawRequestBody) *WithdrawRequestBody {
	body := &WithdrawRequestBody{
		Amount: p.Amount,
	}
	return body
}

// NewTransferRequestBody builds the HTTP request body from the payload of the
// "transfer" endpoint of the "v1/wallet" service.
func NewTransferRequestBody(p *v1wallet.TransferRequestBody) *TransferRequestBody {
	body := &TransferRequestBody{
		ReceiverID: p.ReceiverID,
		Amount:     p.Amount,
	}
	return body
}

// NewBalanceResponseBodyOK builds a "v1/wallet" service "balance" endpoint
// result from a HTTP "OK" response.
func NewBalanceResponseBodyOK(body *BalanceResponseBody) *v1wallet.BalanceResponseBody {
	v := &v1wallet.BalanceResponseBody{
		Amount:    *body.Amount,
		UpdatedAt: *body.UpdatedAt,
	}

	return v
}

// NewAdminWalletsAdminWalletResponseBodyOK builds a "v1/wallet" service
// "admin/wallets" endpoint result from a HTTP "OK" response.
func NewAdminWalletsAdminWalletResponseBodyOK(body *AdminWalletsResponseBody) *v1wallet.AdminWalletResponseBody {
	v := &v1wallet.AdminWalletResponseBody{}
	if body.Data != nil {
		v.Data = make([]*v1wallet.Wallet, len(body.Data))
		for i, val := range body.Data {
			v.Data[i] = unmarshalWalletResponseBodyToV1walletWallet(val)
		}
	}

	return v
}

// ValidateBalanceResponseBody runs the validations defined on
// BalanceResponseBody
func ValidateBalanceResponseBody(body *BalanceResponseBody) (err error) {
	if body.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Amount", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("UpdatedAt", "body"))
	}
	return
}
