// Code generated by goa v3.4.3, DO NOT EDIT.
//
// v1/wallet HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/jainpiyush19/cryptowallet/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	v1wallet "github.com/jainpiyush19/cryptowallet/gen/v1_wallet"
	goahttp "goa.design/goa/v3/http"
)

// BuildHealthRequest instantiates a HTTP request object with method and path
// set to call the "v1/wallet" service "health" endpoint
func (c *Client) BuildHealthRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: HealthV1WalletPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("v1/wallet", "health", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeHealthResponse returns a decoder for responses returned by the
// v1/wallet health endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeHealthResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("v1/wallet", "health", resp.StatusCode, string(body))
		}
	}
}

// BuildDepositRequest instantiates a HTTP request object with method and path
// set to call the "v1/wallet" service "deposit" endpoint
func (c *Client) BuildDepositRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DepositV1WalletPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("v1/wallet", "deposit", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDepositRequest returns an encoder for requests sent to the v1/wallet
// deposit server.
func EncodeDepositRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*v1wallet.DepositRequestBody)
		if !ok {
			return goahttp.ErrInvalidType("v1/wallet", "deposit", "*v1wallet.DepositRequestBody", v)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewDepositRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("v1/wallet", "deposit", err)
		}
		return nil
	}
}

// DecodeDepositResponse returns a decoder for responses returned by the
// v1/wallet deposit endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeDepositResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("v1/wallet", "deposit", resp.StatusCode, string(body))
		}
	}
}

// BuildWithdrawRequest instantiates a HTTP request object with method and path
// set to call the "v1/wallet" service "withdraw" endpoint
func (c *Client) BuildWithdrawRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: WithdrawV1WalletPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("v1/wallet", "withdraw", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeWithdrawRequest returns an encoder for requests sent to the v1/wallet
// withdraw server.
func EncodeWithdrawRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*v1wallet.WithdrawRequestBody)
		if !ok {
			return goahttp.ErrInvalidType("v1/wallet", "withdraw", "*v1wallet.WithdrawRequestBody", v)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewWithdrawRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("v1/wallet", "withdraw", err)
		}
		return nil
	}
}

// DecodeWithdrawResponse returns a decoder for responses returned by the
// v1/wallet withdraw endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeWithdrawResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("v1/wallet", "withdraw", resp.StatusCode, string(body))
		}
	}
}

// BuildTransferRequest instantiates a HTTP request object with method and path
// set to call the "v1/wallet" service "transfer" endpoint
func (c *Client) BuildTransferRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: TransferV1WalletPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("v1/wallet", "transfer", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeTransferRequest returns an encoder for requests sent to the v1/wallet
// transfer server.
func EncodeTransferRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*v1wallet.TransferRequestBody)
		if !ok {
			return goahttp.ErrInvalidType("v1/wallet", "transfer", "*v1wallet.TransferRequestBody", v)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewTransferRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("v1/wallet", "transfer", err)
		}
		return nil
	}
}

// DecodeTransferResponse returns a decoder for responses returned by the
// v1/wallet transfer endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeTransferResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("v1/wallet", "transfer", resp.StatusCode, string(body))
		}
	}
}

// BuildBalanceRequest instantiates a HTTP request object with method and path
// set to call the "v1/wallet" service "balance" endpoint
func (c *Client) BuildBalanceRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: BalanceV1WalletPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("v1/wallet", "balance", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeBalanceRequest returns an encoder for requests sent to the v1/wallet
// balance server.
func EncodeBalanceRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*v1wallet.BalanceRequestBody)
		if !ok {
			return goahttp.ErrInvalidType("v1/wallet", "balance", "*v1wallet.BalanceRequestBody", v)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		values.Add("userID", fmt.Sprintf("%v", p.UserID))
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeBalanceResponse returns a decoder for responses returned by the
// v1/wallet balance endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeBalanceResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body BalanceResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("v1/wallet", "balance", err)
			}
			err = ValidateBalanceResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("v1/wallet", "balance", err)
			}
			res := NewBalanceResponseBodyOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("v1/wallet", "balance", resp.StatusCode, string(body))
		}
	}
}

// BuildAdminWalletsRequest instantiates a HTTP request object with method and
// path set to call the "v1/wallet" service "admin/wallets" endpoint
func (c *Client) BuildAdminWalletsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AdminWalletsV1WalletPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("v1/wallet", "admin/wallets", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAdminWalletsRequest returns an encoder for requests sent to the
// v1/wallet admin/wallets server.
func EncodeAdminWalletsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*v1wallet.AdminWalletRequestBody)
		if !ok {
			return goahttp.ErrInvalidType("v1/wallet", "admin/wallets", "*v1wallet.AdminWalletRequestBody", v)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeAdminWalletsResponse returns a decoder for responses returned by the
// v1/wallet admin/wallets endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeAdminWalletsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AdminWalletsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("v1/wallet", "admin/wallets", err)
			}
			res := NewAdminWalletsAdminWalletResponseBodyOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("v1/wallet", "admin/wallets", resp.StatusCode, string(body))
		}
	}
}

// unmarshalWalletResponseBodyToV1walletWallet builds a value of type
// *v1wallet.Wallet from a value of type *WalletResponseBody.
func unmarshalWalletResponseBodyToV1walletWallet(v *WalletResponseBody) *v1wallet.Wallet {
	if v == nil {
		return nil
	}
	res := &v1wallet.Wallet{
		UserID:    v.UserID,
		Amount:    v.Amount,
		UpdatedAt: v.UpdatedAt,
	}

	return res
}
