// Code generated by goa v3.4.3, DO NOT EDIT.
//
// v1/wallet client HTTP transport
//
// Command:
// $ goa gen github.com/jainpiyush19/cryptowallet/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the v1/wallet service endpoint HTTP clients.
type Client struct {
	// Health Doer is the HTTP client used to make requests to the health endpoint.
	HealthDoer goahttp.Doer

	// Deposit Doer is the HTTP client used to make requests to the deposit
	// endpoint.
	DepositDoer goahttp.Doer

	// Withdraw Doer is the HTTP client used to make requests to the withdraw
	// endpoint.
	WithdrawDoer goahttp.Doer

	// Transfer Doer is the HTTP client used to make requests to the transfer
	// endpoint.
	TransferDoer goahttp.Doer

	// Balance Doer is the HTTP client used to make requests to the balance
	// endpoint.
	BalanceDoer goahttp.Doer

	// AdminWallets Doer is the HTTP client used to make requests to the
	// admin/wallets endpoint.
	AdminWalletsDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the v1/wallet service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		HealthDoer:          doer,
		DepositDoer:         doer,
		WithdrawDoer:        doer,
		TransferDoer:        doer,
		BalanceDoer:         doer,
		AdminWalletsDoer:    doer,
		CORSDoer:            doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// Health returns an endpoint that makes HTTP requests to the v1/wallet service
// health server.
func (c *Client) Health() goa.Endpoint {
	var (
		decodeResponse = DecodeHealthResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildHealthRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.HealthDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("v1/wallet", "health", err)
		}
		return decodeResponse(resp)
	}
}

// Deposit returns an endpoint that makes HTTP requests to the v1/wallet
// service deposit server.
func (c *Client) Deposit() goa.Endpoint {
	var (
		encodeRequest  = EncodeDepositRequest(c.encoder)
		decodeResponse = DecodeDepositResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDepositRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DepositDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("v1/wallet", "deposit", err)
		}
		return decodeResponse(resp)
	}
}

// Withdraw returns an endpoint that makes HTTP requests to the v1/wallet
// service withdraw server.
func (c *Client) Withdraw() goa.Endpoint {
	var (
		encodeRequest  = EncodeWithdrawRequest(c.encoder)
		decodeResponse = DecodeWithdrawResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildWithdrawRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.WithdrawDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("v1/wallet", "withdraw", err)
		}
		return decodeResponse(resp)
	}
}

// Transfer returns an endpoint that makes HTTP requests to the v1/wallet
// service transfer server.
func (c *Client) Transfer() goa.Endpoint {
	var (
		encodeRequest  = EncodeTransferRequest(c.encoder)
		decodeResponse = DecodeTransferResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildTransferRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.TransferDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("v1/wallet", "transfer", err)
		}
		return decodeResponse(resp)
	}
}

// Balance returns an endpoint that makes HTTP requests to the v1/wallet
// service balance server.
func (c *Client) Balance() goa.Endpoint {
	var (
		encodeRequest  = EncodeBalanceRequest(c.encoder)
		decodeResponse = DecodeBalanceResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildBalanceRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.BalanceDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("v1/wallet", "balance", err)
		}
		return decodeResponse(resp)
	}
}

// AdminWallets returns an endpoint that makes HTTP requests to the v1/wallet
// service admin/wallets server.
func (c *Client) AdminWallets() goa.Endpoint {
	var (
		encodeRequest  = EncodeAdminWalletsRequest(c.encoder)
		decodeResponse = DecodeAdminWalletsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildAdminWalletsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AdminWalletsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("v1/wallet", "admin/wallets", err)
		}
		return decodeResponse(resp)
	}
}
